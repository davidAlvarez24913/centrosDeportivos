enum Sport {
  Futbol
  Voley
  Baloncesto
  Tenis
}
enum Status {
  Ok
  Failed
}
enum Weekday {
  Monday
  Tuesday
  Wednesday
  Thursday
  Friday
  Saturday
  Sunday
}

scalar String

type OperationResponse {
  status: Status!
  message: String!
}
type User {
  userId: ID!
  id: String!
  birthDate: String!
  name: String!
  phone: String!
  email: String!
}

type RangeHour {
  startHour: String!
  endHour: String!
  price: Float!
}

type Disponibility {
  Sunday: [RangeHour]
  Monday: [RangeHour]
  Tuesday: [RangeHour]
  Wednesday: [RangeHour]
  Thursday: [RangeHour]
  Friday: [RangeHour]
  Saturday: [RangeHour]
}

type SportCenter {
  sportCenterId: ID!
  name: String!
  description: String!
  email: String!
  phone: String!
  ubication: String!
  schedule: String! # Hours attention
  services: [Service]
  image: String!
  ranking: Int!
  access: Boolean!
}

type Service {
  serviceId: ID!
  name: String!
  sport: Sport!
  description: String!
  image: String!
  sportCenterId: ID
  disponibility: Disponibility
  reservations: [Reservation!]
}

type BankAccount {
  bankAccountId: ID!
  name: String!
  id: String!
  accountType: String!
  accountNumber: String!
  email: String!
  sportCenterId: ID!
}

type Reservation {
  reservationId: ID!
  state: Boolean!
  paymentId: String
  reservationPrice: Float!
  userId: ID!
  serviceId: ID!
  image: String!
  date: String!
  rangeHour: [String]!
}

type Comment {
  commentId: ID!
  sportCenterId: ID
  serviceId: ID
  userId: ID!
  comment: String!
}

input CreateUserInput {
  userId: ID!
  name: String!
  id: String!
  birthDate: String!
  phone: String!
  email: String!
}
input CreateCommentInput {
  sportCenterId: ID!
  serviceId: ID
  userId: ID!
  comment: String!
}

input CreateSportCenterInput {
  sportCenterId: ID!
  name: String!
  email: String!
  description: String!
  phone: String!
  ubication: String!
  schedule: String
  image: String!
  ranking: Int
  access: Boolean!
}

input CreateServiceInput {
  name: String!
  sport: Sport! #Enum
  description: String!
  sportCenterId: ID!
  image: String
}
input CreateBankAccountInput {
  name: String!
  id: String!
  accountType: String!
  accountNumber: String!
  email: String!
  sportCenterId: ID!
}
input CreateScheduleInput {
  startHour: String!
  endHour: String!
  weekday: Weekday!
  price: Float!
}

input CreateReservationInput {
  serviceId: ID!
  userId: ID!
  date: String!
  reservationPrice: Float!
  rangeHour: [String]
  paymentId: String
  image: String
}

input UpdateUserInput {
  userId: ID!
  name: String!
  id: String!
  birthDate: String!
  phone: String!
  email: String!
}
input UpdateSportCenterInput {
  sportCenterId: ID!
  name: String
  email: String
  description: String
  phone: String
  ubication: String
  image: String
  schedule: String
}
input UpdateServiceInput {
  serviceId: ID!
  sportCenterId: ID!
  name: String
  description: String
  sport: Sport
  image: String
  disponibility: UpdateDisponibilityInput
}
input UpdateBankAccountInput {
  bankAccountId: ID!
  name: String
  id: String
  accountType: String
  accountNumber: String
  email: String
}
input UpdateRangeHourInput {
  startHour: String!
  endHour: String!
  price: Float!
}
input UpdateDisponibilityInput {
  Sunday: [UpdateRangeHourInput!]
  Monday: [UpdateRangeHourInput!]
  Tuesday: [UpdateRangeHourInput!]
  Wednesday: [UpdateRangeHourInput!]
  Thursday: [UpdateRangeHourInput!]
  Friday: [UpdateRangeHourInput!]
  Saturday: [UpdateRangeHourInput!]
}
type ServiceWithSportCenter {
  service: Service
  sportCenter: SportCenter
}
type Query {
  #users
  allUsers: [User]
  findUser(userId: ID!): User

  #sportcenters
  listSportCenters: [SportCenter!]
  getSportCenter(sportCenterId: ID!): SportCenter

  #services
  listServices: [Service]
  listServicesBySportCenterId(sportCenterId: ID!): [Service]
  listServicesBySport(sport: Sport!): [ServiceWithSportCenter]
  getAccess(sportCenterId: ID!): Boolean!
  getSportCenterWithServices(sportCenterId: ID!): SportCenter
  getDisponibility(serviceId: ID!): Disponibility

  #bankAccounts
  listBankAccountsBySportCenterId(sportCenterId: ID!): [BankAccount]

  #reservations
  reservationCount: Int!
  allReservations: [Reservation!]
  findReservation(id: ID!): Reservation
  getReservationsByDate(date: String!, serviceId: String!): [Reservation]

  #comments
  listCommentsByService(sportCenterId: ID!, serviceId: ID!): [Comment!]
  listCommentsBySportCenter(sportCenterId: ID!): [Comment!]
  allComments: [Comment!]

  # disponibility will be query get all reservationsByServiceByDate and schedule
  # Create resolver get Service By Id
}

type Mutation {
  #users
  createUser(input: CreateUserInput!): User
  deleteUser(userId: ID!): OperationResponse
  updateUser(input: UpdateUserInput!): OperationResponse

  #sportcenters
  createSportCenter(input: CreateSportCenterInput!): SportCenter
  updateSportCenter(input: UpdateSportCenterInput!): OperationResponse
  deleteSportCenter(sportCenterId: ID!): OperationResponse
  giveAccess(sportCenterId: String!): OperationResponse

  #services
  createService(input: CreateServiceInput!): Service
  updateService(input: UpdateServiceInput): OperationResponse
  deleteService(serviceId: ID!): OperationResponse

  #bankAccounts
  createBankAccount(input: CreateBankAccountInput!): BankAccount
  updateBankAccount(input: UpdateBankAccountInput!): OperationResponse
  deleteBankAccount(bankAccountId: ID!): OperationResponse

  #reservations
  createReservationSC(input: CreateReservationInput!): Reservation
  createReservationUser(input: CreateReservationInput!): Reservation
  deleteReservation(id: ID!): OperationResponse

  #comments
  createComment(input: CreateCommentInput!): Comment
  updateComment(id: ID!): Comment
  deleteComment(id: ID!): OperationResponse

  # TODO
  # mutation to plus and less like
  # query filter by sport all sportcenter
  # add description in sportcenter
  # Add query Myreservations with : nameSportCenter , nameService, rangeHour stateReservation
}
